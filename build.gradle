plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'com.api.profile'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

jacoco {
	toolVersion = '0.8.12'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.4.1'
	implementation 'org.springframework.boot:spring-boot-starter-web:3.4.1'
	compileOnly 'org.projectlombok:lombok:1.18.36'
	developmentOnly 'org.springframework.boot:spring-boot-devtools:3.4.1'
	runtimeOnly 'com.mysql:mysql-connector-j:9.1.0'
	annotationProcessor 'org.projectlombok:lombok:1.18.36'
	testImplementation 'org.springframework.boot:spring-boot-starter-test:3.4.1'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.11.4'
	implementation 'org.springframework.boot:spring-boot-starter-validation:3.4.1'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.3'
	implementation 'org.springframework.boot:spring-boot-starter-security:3.4.2'
	implementation 'com.auth0:java-jwt:4.5.0'
}

tasks.named('test') {
	useJUnitPlatform()
}
jacocoTestReport {
	dependsOn test

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"**/UsersApplication.class",
					"**/TestController.class",
					"**/SwaggerConfig.class",
					"**/model/user/**",
					"**/ExceptionCode.class",
					"**/SecurityConfig.class"
			])
		}))
	}
}

bootJar {
	mainClass = 'com.api.profile.users.UsersApplication'
}
